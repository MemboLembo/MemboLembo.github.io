{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","border","borderRadius","padding","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","findByLabelText","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qNAIeA,EAFCC,IAAMC,gBCGhBC,EAAS,CACbC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,OAAQ,iBACRC,aAAc,MACdC,QAAS,aACTC,aAAc,SAEhBC,MAAO,CACLC,YAAa,SAwCFC,MApCf,YAA8C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvBC,EAAeC,qBAAWnB,GAA1BkB,WACFE,EAAU,GAMhB,OAJIL,EAAKM,WACPD,EAAQE,KAAK,QAIb,wBAAIC,MAAOpB,EAAOC,IAChB,0BAAMoB,UAAWJ,EAAQK,KAAK,MAC5B,2BACEC,KAAK,WACLC,QAASZ,EAAKM,UACdE,MAAOpB,EAAOS,MACdK,SAAU,kBAAMA,EAASF,EAAKa,OAEhC,gCAASZ,EAAQ,GAPnB,OASGD,EAAKc,OAIR,4BAAQL,UAAU,KAAKM,QAASZ,EAAWa,KAAK,KAAMhB,EAAKa,KAA3D,UCtCAzB,EAAS,CACb6B,GAAI,CACFC,UAAW,OACXC,OAAQ,EACRxB,QAAS,IA0BEyB,MAtBf,SAAkBC,GAChB,OACE,wBAAIb,MAAOpB,EAAO6B,IACfI,EAAMC,MAAMC,KAAI,SAACvB,EAAMC,GACtB,OACE,kBAAC,EAAD,CACED,KAAMA,EACNwB,IAAKxB,EAAKa,GACVZ,MAAOA,EACPC,SAAUmB,EAAMI,gB,OCnBb,oBACb,yBACEjB,MAAO,CACLlB,QAASoC,IACTnC,eAAgB,SAChB4B,OAAQ,UAGV,yBAAKV,UAAU,oBCHbkB,EAAUzC,IAAM0C,MAAK,kBACzB,IAAIC,SAAQ,SAAAC,GACVC,YAAW,WACTD,EAAQ,iCACP,WAuEQE,MAnEf,WAAgB,IAAD,EACa9C,IAAM+C,SAAS,IAD5B,mBACNX,EADM,KACCY,EADD,OAMiBhD,IAAM+C,UAAS,GANhC,mBAMNE,EANM,KAMGC,EANH,KA+Cb,OAvCAC,qBAAU,WACRC,MAAM,uDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GACJS,YAAW,WACTG,EAASZ,GACTc,GAAW,KACV,UAEJ,IA+BD,kBAAC,EAAQM,SAAT,CAAkBC,MAAO,CAAExC,WAjB7B,SAAoBU,GAClBqB,EAASZ,EAAMsB,QAAO,SAAA5C,GAAI,OAAIA,EAAKa,KAAOA,SAiBxC,yBAAKJ,UAAU,WACb,qCACA,kBAAC,IAAMoC,SAAP,CAAgBC,SAAU,0CACxB,kBAACnB,EAAD,CAASoB,SAjBjB,SAAiBjC,GACfoB,EACEZ,EAAM0B,OAAO,CACX,CACElC,QACAD,GAAIoC,KAAKC,MACT5C,WAAW,UAcZ6B,GAAW,kBAACgB,EAAD,MAEX7B,EAAM8B,OACL,kBAAC,EAAD,CAAU9B,MAAOA,EAAOG,SAvChC,SAAoBZ,GAClBqB,EACEZ,EAAMC,KAAI,SAAAvB,GAKR,OAJIA,EAAKa,KAAOA,IACdb,EAAKM,WAAaN,EAAKM,WAGlBN,SAkCLmC,EAAU,KAAO,2CChEPkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.0d4054df.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext();\n\nexport default Context;","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Context from \"../context\";\n\n//1й из способов задать стили\nconst styles = {\n  li: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    padding: \".5rem 1rem\",\n    marginBottom: \".5rem\"\n  },\n  input: {\n    marginRight: \"1rem\"\n  }\n};\n\nfunction TodoItem({ todo, index, onChange }) {\n  const { removeTodo } = useContext(Context);\n  const classes = [];\n\n  if (todo.completed) {\n    classes.push(\"done\");\n  }\n\n  return (\n    <li style={styles.li}>\n      <span className={classes.join(\" \")}>\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          style={styles.input}\n          onChange={() => onChange(todo.id)}\n        ></input>\n        <strong>{index + 1}</strong>\n        &nbsp;\n        {todo.title}\n      </span>\n\n      {/* 2й способ задать стили из отдельного css */}\n      <button className=\"rm\" onClick={removeTodo.bind(null, todo.id)}>\n        &times;\n      </button>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from \"prop-types\";\n\n//1й из способов задать стили\nconst styles = {\n  ul: {\n    listStyle: \"none\",\n    margin: 0,\n    padding: 0\n  }\n};\n\nfunction TodoList(props) {\n  return (\n    <ul style={styles.ul}>\n      {props.todos.map((todo, index) => {\n        return (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            index={index}\n            onChange={props.onToggle}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggle: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport { findByLabelText } from \"@testing-library/dom\";\n\nexport default () => (\n  <div\n    style={{\n      display: findByLabelText,\n      justifyContent: \"center\",\n      margin: \".5rem\"\n    }}\n  >\n    <div className=\"lds-dual-ring\"></div>\n  </div>\n);\n","import React, { useEffect } from \"react\";\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport Loader from \"./Loader\"\n\n//представим что компонент AddTodo очень большой, и мы хотим загрузить его \n//отдельно от всего контента.\n//Чтоб увидеть что оно реально работает добавим задержку.\nconst AddTodo = React.lazy(() => \n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve(import('./Todo/AddTodo'));\n    }, 3000)\n  })\n);\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    // { id: 1, completed: false, title: \"Купить хлеб\" },\n    // { id: 2, completed: false, title: \"Купить масло\" },\n    // { id: 3, completed: false, title: \"Купить маргарин\" }\n  ]);\n  const [loading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n    .then(response => response.json())\n    .then(todos => {\n      setTimeout(() => {\n        setTodos(todos)\n        setLoading(false)\n      }, 2000)\n    })\n  }, [])\n\n  function toogleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          title,\n          id: Date.now(),\n          completed: false\n        }\n      ])\n    );\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>React</h1>\n        <React.Suspense fallback={<p>Loading...</p>}>\n          <AddTodo onCreate={addTodo}></AddTodo>\n        </React.Suspense>\n\n        {loading && <Loader/>}\n        {/* передаём свойства, что в массиве */}\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toogleTodo}></TodoList>\n        ) : (\n          loading ? null : <p>No todos!</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}