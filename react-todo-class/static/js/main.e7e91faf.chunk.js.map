{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","value","changeInputValue","setState","props","onSearchChange","type","placeholder","onChange","event","target","this","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","important","classNames","onClick","TodoList","todos","elements","map","item","id","itemProps","key","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","createTodoItem","searchValue","deleteItem","todo","addItem","text","concat","toggleProperty","searchItem","toLowerCase","includes","items","propName","visibleItems","doneCount","el","length","todoCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7e91faf.chunk.js","sourcesContent":["import AppHeader from './app-header';\n\nexport default AppHeader;\n","import React from 'react';\nimport './app-header.css';\n\nconst AppHeader = ({toDo, done}) => {\n  return (\n    <div className=\"app-header d-flex\">\n      <h1>Todo List</h1>\n      <h2>{toDo} more to do, {done} done</h2>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import SearchPanel from './search-panel';\n\nexport default SearchPanel;\n","import React, { Component} from 'react';\n\nimport './search-panel.css';\n\nexport default class SearchPanel extends Component {\n  \n  state = {\n    value: ''\n  }\n\n  changeInputValue = (value) => {\n    this.setState({value});\n    this.props.onSearchChange(value);\n  }\n\n  render() {\n    return (\n      <input type=\"text\"\n                className=\"form-control search-input\"\n                placeholder=\"type to search\"\n                onChange={event => this.changeInputValue(event.target.value)}\n                value={this.state.value} />\n    );\n  }\n};\n\n//using hooks\n// const SearchPanel = ({onChange}) => {\n//   const [value, setValue] = useState('');\n\n//   return (\n//     <input type=\"text\"\n//               className=\"form-control search-input\"\n//               placeholder=\"type to search\"\n//               onChange={event => {\n//                 setValue(event.target.value);\n//                 onChange(event.target.value);\n//               }}\n//               value={value} />\n//   );\n// };\n\n// export default SearchPanel;\n","import TodoListItem from './todo-list-item';\n\nexport default TodoListItem;\n","import React, { Component } from \"react\";\n\nimport \"./todo-list-item.css\";\n\nexport default class TodoListItem extends Component {\n\n  render() {\n    const {\n      label,\n      onDeleted,\n      onToggleImportant,\n      onToggleDone,\n      important,\n      done\n    } = this.props;\n\n    let classNames = \"todo-list-item\";\n\n    if (done) {\n      classNames += \" done\";\n    }\n\n    if (important) {\n      classNames += \" important\";\n    }\n\n    return (\n      <span className={classNames}>\n        <span className=\"todo-list-item-label\" onClick={onToggleDone}>\n          {label}\n        </span>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-success btn-sm float-right\"\n          onClick={onToggleImportant}\n        >\n          <i className=\"fa fa-exclamation\" />\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger btn-sm float-right\"\n          onClick={onDeleted}\n        >\n          <i className=\"fa fa-trash-o\" />\n        </button>\n      </span>\n    );\n  }\n}\n","import TodoList from './todo-list';\n\nexport default TodoList;\n","import React from \"react\";\n\nimport TodoListItem from \"../todo-list-item\";\nimport \"./todo-list.css\";\n\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => {\n  const elements = todos.map(item => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <li key={id} className=\"list-group-item\">\n        <TodoListItem\n          {...itemProps}\n          onDeleted={() => onDeleted(id)}\n          onToggleImportant={() => onToggleImportant(id)}\n          onToggleDone={() => onToggleDone(id)}\n        />\n      </li>\n    );\n  });\n\n  return <ul className=\"list-group todo-list\">{elements}</ul>;\n};\n\nexport default TodoList;\n","import ItemStatusFilter from './item-status-filter';\n\nexport default ItemStatusFilter;\n","import React, { Component } from 'react';\n\nimport './item-status-filter.css';\n\nexport default class ItemStatusFilter extends Component {\n\n  buttons = [\n    {name: 'all', label: 'All'},\n    {name: 'active', label: 'Active'},\n    {name: 'done', label: 'Done'}\n  ]\n\n  render() {\n    const {filter, onFilterChange} = this.props;\n\n    const buttons = this.buttons.map(({name, label}) => {\n      const isActive = filter === name;\n      const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\n      return (\n        <button \n          type=\"button\"\n          className={`btn ${clazz}`}\n          key={name}\n          onClick={() => onFilterChange(name)}>\n          {label}\n        </button>\n      )\n    })\n\n    return (\n      <div className=\"btn-group\">\n        {buttons}\n      </div>\n    );\n  }\n}","import ItemAddForm from './item-add-form';\n\nexport default ItemAddForm;","import React, { Component } from \"react\";\n\nimport \"./item-add-form.css\";\n\nexport default class ItemAddForm extends Component {\n  state = {\n    label: ''\n  };\n\n  onLabelChange = event => {\n    this.setState({\n      label: event.target.value\n    });\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.props.onItemAdded(this.state.label);\n    this.setState({\n      label: ''\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"item-add-form d-flex\" onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          onChange={this.onLabelChange}\n          placeholder=\"What needs to be done\"\n          value={this.state.label}\n        />\n        <button className=\"btn btn-outline-secondary\">Add</button>\n      </form>\n    );\n  }\n}\n","import App from './app';\n\nexport default App;\n","import React, { Component } from \"react\";\n\nimport AppHeader from \"../app-header\";\nimport SearchPanel from \"../search-panel\";\nimport TodoList from \"../todo-list\";\nimport ItemStatusFilter from \"../item-status-filter\";\nimport ItemAddForm from \"../item-add-form\";\n\nimport \"./app.css\";\n\nexport default class App extends Component {\n  maxId = 100;\n  state = {\n    todoData: [\n      this.createTodoItem(\"Have a breakfast\"),\n      this.createTodoItem(\"Take a shower\"),\n      this.createTodoItem(\"Make Awesome App\"),\n      this.createTodoItem(\"Have a lunch\")\n    ],\n    searchValue: '',\n    filter: 'all'\n  };\n\n  createTodoItem(label) {\n    return {\n      label,\n      important: false,\n      done: false,\n      id: this.maxId++\n    };\n  }\n\n  //class fields (functions)\n  deleteItem = id => {\n    const todoData = this.state.todoData.filter(todo => todo.id !== id);\n    this.setState({ todoData });\n    // 2nd way\n    // this.setState(({ todoData }) => {\n    //   const idx = todoData.findIndex((el) => el.id === id);\n    //   // todoData.splice(idx, 1) метод мутабельный, и здесь лучше не использовать\n    //   const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx+1)];\n\n    //   return {\n    //     todoData: newArray\n    //   }\n    // });\n  };\n\n  addItem = text => {\n    if (text) {\n      const todoData = this.state.todoData.concat([this.createTodoItem(text)]);\n      this.setState({ todoData });\n    }\n\n    // 2nd way\n    // const newItem = {\n    //   label: text,\n    //   important: false,\n    //   id: this.maxId++\n    // };\n\n    // this.setState(({ todoData }) => {\n    //   const newArr = [\n    //     ...todoData,\n    //     newItem\n    //   ];\n\n    //   return {\n    //     todoData: newArr\n    //   }\n    // });\n  };\n\n  toggleProperty(id, propName) {\n    const todoData = this.state.todoData.map(todo => {\n      if (todo.id === id) {\n        todo[propName] = !todo[propName];\n      }\n\n      return todo;\n    });\n\n    return todoData;\n  }\n\n  onToggleImportant = (id) => {\n    this.setState({todoData: this.toggleProperty(id, 'important')});\n  };\n\n  onToggleDone = (id) => {\n    this.setState({todoData: this.toggleProperty(id, 'done')});\n  };\n\n  //2nd way\n  // toggleProperty(arr, id, propName) {\n  //     const idx = arr.findIndex(el => el.id === id);\n\n  //     const oldItem = arr[idx];\n  //     const newItem = { ...oldItem, [propName]: !oldItem[propName] };\n\n  //     return [\n  //       ...arr.slice(0, idx),\n  //       newItem,\n  //       ...arr.slice(idx + 1)\n  //     ];\n  // }\n\n  // onToggleImportant = id => {\n  //   this.setState(({ todoData }) => {\n  //     return { todoData: this.toggleProperty(todoData, id, 'important') };\n  //   });\n  // };\n\n  // onToggleDone = id => {\n  //   this.setState(({ todoData }) => {\n  //     return { todoData: this.toggleProperty(todoData, id, 'done') };\n  //   });\n  // };\n\n  searchItem = (searchValue, todoData) => {\n    if (!searchValue) {\n      return todoData;\n    };\n\n    return todoData.filter((todo) => {\n      return todo.label.toLowerCase().includes(searchValue.toLowerCase());\n    });\n  }\n\n  onSearchChange = (searchValue) => {\n    this.setState({searchValue});\n  }\n\n  filter = (items, filter) => {\n    switch(filter) {\n      case 'all':\n        return items;\n      case 'active':\n        return items.filter((item) => !item.done);\n      case 'done':\n        return items.filter((item) => item.done);\n      default:\n        return items;\n    }\n  }\n\n  onFilterChange = (filter) => {\n    this.setState({filter});\n  }\n\n  render() {\n    const { todoData, searchValue, filter } = this.state;\n    const visibleItems = this.filter(this.searchItem(searchValue, todoData), filter);\n    const doneCount = todoData.filter(el => el.done).length;\n    const todoCount = todoData.filter(el => !el.done).length;\n\n    return (\n      <div className=\"todo-app\">\n        <AppHeader toDo={todoCount} done={doneCount} />\n        <div className=\"top-panel d-flex\">\n          <SearchPanel onSearchChange={this.onSearchChange}/>\n          <ItemStatusFilter filter={filter} onFilterChange={this.onFilterChange}/>\n        </div>\n\n        <TodoList\n          todos={visibleItems}\n          onDeleted={this.deleteItem}\n          onToggleImportant={this.onToggleImportant}\n          onToggleDone={this.onToggleDone}\n        />\n        <ItemAddForm onItemAdded={this.addItem} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}